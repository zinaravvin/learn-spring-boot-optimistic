
buildscript {
	repositories {
		mavenLocal()
		maven { url "https://repo1.maven.org/maven2" }
	}
	dependencies {
		classpath "org.openapitools:openapi-generator-gradle-plugin:5.3.0"
	}


}
//apply plugin: 'org.openapi.generator'

plugins {
	id 'org.springframework.boot' version '2.5.0-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'com.bmuschko.docker-java-application' version '7.0.1'
	id 'com.bmuschko.docker-remote-api' version '7.0.1'
	id "org.flywaydb.flyway" version "8.3.0"
	id 'com.avast.gradle.docker-compose' version '0.7.1'
	id "com.fbix.gradle.swagger.codegen" version "0.1.1"
	//id "org.openapi.generator" version "4.3.1"
	id "com.github.johnrengelman.processes" version "0.5.0"
	//id("org.springdoc.openapi-gradle-plugin") version "1.0.0"
	//id "io.swagger.core.v3.swagger-gradle-plugin" version "2.1.12"
	id "org.openapi.generator" version "4.3.1"
}
//apply plugin: "io.swagger.core.v3.swagger-gradle-plugin"
apply plugin: 'org.openapi.generator'

//enableSpringDevTools
apply from: "${rootDir}/gradle-plugins/local-env.gradle"
apply plugin: "com.fbix.gradle.swagger.codegen"
group = 'com.springboot.app'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

ext {
	set('springCloudVersion', "2020.0.2-SNAPSHOT")
}

dependencies {
	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter', version: '2.6.3'

	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-freemarker'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-jersey'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	compileJava.dependsOn tasks.openApiGenerate
	implementation 'org.springdoc:springdoc-openapi-ui:1.2.33'
	compile group: 'org.postgresql', name: 'postgresql', version: '42.2.14'
	compile 'org.springframework.integration:spring-integration-jdbc'
	compile "io.springfox:springfox-swagger-ui:3.0.0"
	implementation group: 'io.springfox', name: 'springfox-boot-starter', version: '3.0.0'
	implementation group: 'org.openapitools', name: 'openapi-generator-gradle-plugin', version: '5.3.1'
	implementation 'javax.annotation:javax.annotation-api:1.3.2'
	implementation 'com.squareup.okhttp3:okhttp:3.14.2'
	implementation 'com.squareup.okhttp3:logging-interceptor:3.14.2'
	implementation 'com.google.code.gson:gson:2.8.5'
	implementation 'junit:junit:4.13'
	implementation 'org.threeten:threetenbp:1.4.0'
	implementation 'io.gsonfire:gson-fire:1.8.3'
	implementation 'com.google.code.findbugs:jsr305:3.0.2'
	implementation 'org.apache.oltu.oauth2:org.apache.oltu.oauth2.client:1.0.1'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok:1.18.22'

	//testCompileOnly 'org.projectlombok:lombok:1.18.22'
	//testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'
	//runtimeOnly 'com.h2database:h2'
	//runtimeOnly 'io.micrometer:micrometer-registry-datadog'
	def junitJupiterVersion = '5.1.1'
	testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
	testImplementation "org.junit.jupiter:junit-jupiter-params:$junitJupiterVersion"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.batch:spring-batch-test'
	testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-stub-runner'
	testImplementation group: 'junit', name: 'junit', version: '4.4'

}
openApiGenerate {
	generatorName = "java"
	inputSpec = "$rootDir/src/main/resources/swagger.yml".toString()
	outputDir = "$rootDir/src/main/generated".toString()
	apiPackage = "org.openapi.api"
	invokerPackage = "org.openapi.invoker"
	modelPackage = "org.openapi.model"
	//sourceFolder = "src/gen/java/main"
	configOptions = [
			dateLibrary: "java11"
	]
}
/*def generateJavaClientTask(name, specfile){
	String packageName = name.capitalize()
	return tasks.create("generate.JavaClient", org.openapitools.generator.gradle.plugin.tasks.GenerateTask){
		inputSpec = specfile.toString()
		generatorName = "java"
		outputDir = "${projectDir}/${name}/java/client"
		modelPackage = "com.nytimes.spg.${name}.client.model"
		apiPackage = "com.nytimes.spg.${name}.client.api"

		configOptions = [
				dateLibrary: "java11"
		]
	}
}
Task javaClientTask = generateJavaClientTask("$rootDir/src/main/resources/", "swagger.yml")*/


bootRun {
	systemProperty 'spring.profiles.active', "local"
}

import com.bmuschko.gradle.docker.tasks.image.*
task buildDockerImage(type: DockerBuildImage) {
	inputDir = file('./')
	images.add('learn-spring-boot:latest')
}
build.dependsOn buildDockerImage

def dbSettings = {
	it.url = System.getProperty('db.url', 'jdbc:postgresql://localhost:5434/postgres')
	it.user = System.getProperty('db.username', 'postgres')
	it.password = System.getProperty('db.password', 'postgres')
}

flyway {
	dbSettings(it)
	outOfOrder = true // This is needed when doing branch based development
	locations = ['filesystem:database/sql']
	baselineVersion = 0.3 // only needed for first run to baseline the current schema
	baselineOnMigrate = true // only needed for first run to baseline the current schema

}
flywayMigrate.dependsOn flywayInfo
bootRun.dependsOn flywayMigrate
compileJava.dependsOn processResources
compileJava.inputs.files(processResources)
configurations {
	all {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
		exclude group: 'ch.qos.logback', module: 'logback-classic'
		exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
	}
}
dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}
